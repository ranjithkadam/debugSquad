 
🧾 CSS Positioning –  
    In CSS, the `position` property controls how an element is placed on the page. It works **with top, right, bottom, and left** properties to move elements around.
    Here are the most commonly used position values:

 1. **static (default)**

✅ Definition:
    This is the **default position** for all HTML elements. Elements are placed in the normal document flow (top to bottom).
You **cannot use** `top`, `right`, `bottom`, or `left` with static.
🧪 Example:

```html
<div style="position: static;">I am static</div>
```

 2. **relative**

 ✅ Definition:
    The element stays in the **normal document flow**, **but you can move it** using `top`, `right`, `bottom`, or `left`. It moves **relative to its original position**.
 🧪 Example:

```html
<div style="position: relative; top: 20px; left: 10px;">
  I moved 20px down and 10px right
</div>
```

3. **absolute**

✅ Definition:
    The element is **removed from the normal flow** and positioned **relative to the nearest positioned ancestor** (not static), or else the `<html>` document.
Use `top`, `right`, `bottom`, `left` to place it **anywhere**.

### 🧪 Example:

```html
<div style="position: relative;">
  <div style="position: absolute; top: 0; right: 0;">
    I stick to the top-right corner of my parent
  </div>
</div>
```

4. **sticky**
✅ Definition:
    It behaves like `relative` **until it reaches a scroll position**, then it "sticks" to that spot (like `fixed`), but **only within its parent container**.
Great for sticky headers or sidebars.

🧪 Example:

```html
<div style="position: sticky; top: 0; background: yellow;">
  I stick to the top when you scroll
</div>
```
⚠️ Make sure the parent element has a height or the sticky effect may not work.
---

5. **flex (display: flex)** – *Not a position value!*
❗ Clarification:
`flex` is **not** a value of the `position` property – it is a value of the `display` property.
It is used to **lay out items** in a row or column with flexible sizing and alignment.
You use `display: flex` to control layout, not positioning like `absolute` or `sticky`.

### 🧪 Example:

```html
<div style="display: flex;">
  <div>Item 1</div>
  <div>Item 2</div>
</div>
```

---

🧠 Bonus Tips for Beginners

✅ Which Position to Use?

* Use **static** when you don’t need special positioning.
* Use **relative** if you want to slightly move an element.
* Use **absolute** to place something freely on the page or inside a parent.
* Use **sticky** to keep headers or menus visible on scroll.
* Use **flex** to create modern layouts like navbars, cards, etc.

💡 Common Mistakes:

* Forgetting that `absolute` looks for the **nearest positioned ancestor** (not static).
* Using `sticky` without enough scroll space or without setting `top`.
* Mixing up `position` with `display`.

---